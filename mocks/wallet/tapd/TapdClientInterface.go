// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	tapd "tajfi-server/wallet/tapd"

	mock "github.com/stretchr/testify/mock"
)

// TapdClientInterface is an autogenerated mock type for the TapdClientInterface type
type TapdClientInterface struct {
	mock.Mock
}

type TapdClientInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TapdClientInterface) EXPECT() *TapdClientInterface_Expecter {
	return &TapdClientInterface_Expecter{mock: &_m.Mock}
}

// AnchorVirtualPSBT provides a mock function with given fields: params
func (_m *TapdClientInterface) AnchorVirtualPSBT(params tapd.AnchorVirtualPSBTParams) (*tapd.AssetTransferResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for AnchorVirtualPSBT")
	}

	var r0 *tapd.AssetTransferResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(tapd.AnchorVirtualPSBTParams) (*tapd.AssetTransferResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(tapd.AnchorVirtualPSBTParams) *tapd.AssetTransferResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tapd.AssetTransferResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(tapd.AnchorVirtualPSBTParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TapdClientInterface_AnchorVirtualPSBT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnchorVirtualPSBT'
type TapdClientInterface_AnchorVirtualPSBT_Call struct {
	*mock.Call
}

// AnchorVirtualPSBT is a helper method to define mock.On call
//   - params tapd.AnchorVirtualPSBTParams
func (_e *TapdClientInterface_Expecter) AnchorVirtualPSBT(params interface{}) *TapdClientInterface_AnchorVirtualPSBT_Call {
	return &TapdClientInterface_AnchorVirtualPSBT_Call{Call: _e.mock.On("AnchorVirtualPSBT", params)}
}

func (_c *TapdClientInterface_AnchorVirtualPSBT_Call) Run(run func(params tapd.AnchorVirtualPSBTParams)) *TapdClientInterface_AnchorVirtualPSBT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tapd.AnchorVirtualPSBTParams))
	})
	return _c
}

func (_c *TapdClientInterface_AnchorVirtualPSBT_Call) Return(_a0 *tapd.AssetTransferResponse, _a1 error) *TapdClientInterface_AnchorVirtualPSBT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TapdClientInterface_AnchorVirtualPSBT_Call) RunAndReturn(run func(tapd.AnchorVirtualPSBTParams) (*tapd.AssetTransferResponse, error)) *TapdClientInterface_AnchorVirtualPSBT_Call {
	_c.Call.Return(run)
	return _c
}

// CallNewAddress provides a mock function with given fields: tapdHost, macaroon, payload
func (_m *TapdClientInterface) CallNewAddress(tapdHost string, macaroon string, payload tapd.NewAddressPayload) (map[string]interface{}, error) {
	ret := _m.Called(tapdHost, macaroon, payload)

	if len(ret) == 0 {
		panic("no return value specified for CallNewAddress")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, tapd.NewAddressPayload) (map[string]interface{}, error)); ok {
		return rf(tapdHost, macaroon, payload)
	}
	if rf, ok := ret.Get(0).(func(string, string, tapd.NewAddressPayload) map[string]interface{}); ok {
		r0 = rf(tapdHost, macaroon, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, tapd.NewAddressPayload) error); ok {
		r1 = rf(tapdHost, macaroon, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TapdClientInterface_CallNewAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallNewAddress'
type TapdClientInterface_CallNewAddress_Call struct {
	*mock.Call
}

// CallNewAddress is a helper method to define mock.On call
//   - tapdHost string
//   - macaroon string
//   - payload tapd.NewAddressPayload
func (_e *TapdClientInterface_Expecter) CallNewAddress(tapdHost interface{}, macaroon interface{}, payload interface{}) *TapdClientInterface_CallNewAddress_Call {
	return &TapdClientInterface_CallNewAddress_Call{Call: _e.mock.On("CallNewAddress", tapdHost, macaroon, payload)}
}

func (_c *TapdClientInterface_CallNewAddress_Call) Run(run func(tapdHost string, macaroon string, payload tapd.NewAddressPayload)) *TapdClientInterface_CallNewAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(tapd.NewAddressPayload))
	})
	return _c
}

func (_c *TapdClientInterface_CallNewAddress_Call) Return(_a0 map[string]interface{}, _a1 error) *TapdClientInterface_CallNewAddress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TapdClientInterface_CallNewAddress_Call) RunAndReturn(run func(string, string, tapd.NewAddressPayload) (map[string]interface{}, error)) *TapdClientInterface_CallNewAddress_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeAddr provides a mock function with given fields: tapdHost, macaroon, address
func (_m *TapdClientInterface) DecodeAddr(tapdHost string, macaroon string, address string) (*tapd.DecodeAddrResponse, error) {
	ret := _m.Called(tapdHost, macaroon, address)

	if len(ret) == 0 {
		panic("no return value specified for DecodeAddr")
	}

	var r0 *tapd.DecodeAddrResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*tapd.DecodeAddrResponse, error)); ok {
		return rf(tapdHost, macaroon, address)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *tapd.DecodeAddrResponse); ok {
		r0 = rf(tapdHost, macaroon, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tapd.DecodeAddrResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(tapdHost, macaroon, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TapdClientInterface_DecodeAddr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeAddr'
type TapdClientInterface_DecodeAddr_Call struct {
	*mock.Call
}

// DecodeAddr is a helper method to define mock.On call
//   - tapdHost string
//   - macaroon string
//   - address string
func (_e *TapdClientInterface_Expecter) DecodeAddr(tapdHost interface{}, macaroon interface{}, address interface{}) *TapdClientInterface_DecodeAddr_Call {
	return &TapdClientInterface_DecodeAddr_Call{Call: _e.mock.On("DecodeAddr", tapdHost, macaroon, address)}
}

func (_c *TapdClientInterface_DecodeAddr_Call) Run(run func(tapdHost string, macaroon string, address string)) *TapdClientInterface_DecodeAddr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TapdClientInterface_DecodeAddr_Call) Return(_a0 *tapd.DecodeAddrResponse, _a1 error) *TapdClientInterface_DecodeAddr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TapdClientInterface_DecodeAddr_Call) RunAndReturn(run func(string, string, string) (*tapd.DecodeAddrResponse, error)) *TapdClientInterface_DecodeAddr_Call {
	_c.Call.Return(run)
	return _c
}

// FundVirtualPSBT provides a mock function with given fields: tapdHost, macaroon, invoice, inputs
func (_m *TapdClientInterface) FundVirtualPSBT(tapdHost string, macaroon string, invoice string, inputs tapd.PrevIds) (*tapd.FundVirtualPSBTResponse, error) {
	ret := _m.Called(tapdHost, macaroon, invoice, inputs)

	if len(ret) == 0 {
		panic("no return value specified for FundVirtualPSBT")
	}

	var r0 *tapd.FundVirtualPSBTResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, tapd.PrevIds) (*tapd.FundVirtualPSBTResponse, error)); ok {
		return rf(tapdHost, macaroon, invoice, inputs)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, tapd.PrevIds) *tapd.FundVirtualPSBTResponse); ok {
		r0 = rf(tapdHost, macaroon, invoice, inputs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tapd.FundVirtualPSBTResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, tapd.PrevIds) error); ok {
		r1 = rf(tapdHost, macaroon, invoice, inputs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TapdClientInterface_FundVirtualPSBT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FundVirtualPSBT'
type TapdClientInterface_FundVirtualPSBT_Call struct {
	*mock.Call
}

// FundVirtualPSBT is a helper method to define mock.On call
//   - tapdHost string
//   - macaroon string
//   - invoice string
//   - inputs tapd.PrevIds
func (_e *TapdClientInterface_Expecter) FundVirtualPSBT(tapdHost interface{}, macaroon interface{}, invoice interface{}, inputs interface{}) *TapdClientInterface_FundVirtualPSBT_Call {
	return &TapdClientInterface_FundVirtualPSBT_Call{Call: _e.mock.On("FundVirtualPSBT", tapdHost, macaroon, invoice, inputs)}
}

func (_c *TapdClientInterface_FundVirtualPSBT_Call) Run(run func(tapdHost string, macaroon string, invoice string, inputs tapd.PrevIds)) *TapdClientInterface_FundVirtualPSBT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(tapd.PrevIds))
	})
	return _c
}

func (_c *TapdClientInterface_FundVirtualPSBT_Call) Return(fundedPsbt *tapd.FundVirtualPSBTResponse, err error) *TapdClientInterface_FundVirtualPSBT_Call {
	_c.Call.Return(fundedPsbt, err)
	return _c
}

func (_c *TapdClientInterface_FundVirtualPSBT_Call) RunAndReturn(run func(string, string, string, tapd.PrevIds) (*tapd.FundVirtualPSBTResponse, error)) *TapdClientInterface_FundVirtualPSBT_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalances provides a mock function with given fields: tapdHost, macaroon
func (_m *TapdClientInterface) GetBalances(tapdHost string, macaroon string) (*tapd.WalletBalancesResponse, error) {
	ret := _m.Called(tapdHost, macaroon)

	if len(ret) == 0 {
		panic("no return value specified for GetBalances")
	}

	var r0 *tapd.WalletBalancesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*tapd.WalletBalancesResponse, error)); ok {
		return rf(tapdHost, macaroon)
	}
	if rf, ok := ret.Get(0).(func(string, string) *tapd.WalletBalancesResponse); ok {
		r0 = rf(tapdHost, macaroon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tapd.WalletBalancesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tapdHost, macaroon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TapdClientInterface_GetBalances_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalances'
type TapdClientInterface_GetBalances_Call struct {
	*mock.Call
}

// GetBalances is a helper method to define mock.On call
//   - tapdHost string
//   - macaroon string
func (_e *TapdClientInterface_Expecter) GetBalances(tapdHost interface{}, macaroon interface{}) *TapdClientInterface_GetBalances_Call {
	return &TapdClientInterface_GetBalances_Call{Call: _e.mock.On("GetBalances", tapdHost, macaroon)}
}

func (_c *TapdClientInterface_GetBalances_Call) Run(run func(tapdHost string, macaroon string)) *TapdClientInterface_GetBalances_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TapdClientInterface_GetBalances_Call) Return(_a0 *tapd.WalletBalancesResponse, _a1 error) *TapdClientInterface_GetBalances_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TapdClientInterface_GetBalances_Call) RunAndReturn(run func(string, string) (*tapd.WalletBalancesResponse, error)) *TapdClientInterface_GetBalances_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransfers provides a mock function with given fields: tapdHost, macaroon
func (_m *TapdClientInterface) GetTransfers(tapdHost string, macaroon string) (tapd.AssetTransfersResponse, error) {
	ret := _m.Called(tapdHost, macaroon)

	if len(ret) == 0 {
		panic("no return value specified for GetTransfers")
	}

	var r0 tapd.AssetTransfersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (tapd.AssetTransfersResponse, error)); ok {
		return rf(tapdHost, macaroon)
	}
	if rf, ok := ret.Get(0).(func(string, string) tapd.AssetTransfersResponse); ok {
		r0 = rf(tapdHost, macaroon)
	} else {
		r0 = ret.Get(0).(tapd.AssetTransfersResponse)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tapdHost, macaroon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TapdClientInterface_GetTransfers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransfers'
type TapdClientInterface_GetTransfers_Call struct {
	*mock.Call
}

// GetTransfers is a helper method to define mock.On call
//   - tapdHost string
//   - macaroon string
func (_e *TapdClientInterface_Expecter) GetTransfers(tapdHost interface{}, macaroon interface{}) *TapdClientInterface_GetTransfers_Call {
	return &TapdClientInterface_GetTransfers_Call{Call: _e.mock.On("GetTransfers", tapdHost, macaroon)}
}

func (_c *TapdClientInterface_GetTransfers_Call) Run(run func(tapdHost string, macaroon string)) *TapdClientInterface_GetTransfers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TapdClientInterface_GetTransfers_Call) Return(transfers tapd.AssetTransfersResponse, err error) *TapdClientInterface_GetTransfers_Call {
	_c.Call.Return(transfers, err)
	return _c
}

func (_c *TapdClientInterface_GetTransfers_Call) RunAndReturn(run func(string, string) (tapd.AssetTransfersResponse, error)) *TapdClientInterface_GetTransfers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUtxos provides a mock function with given fields: tapdHost, macaroon
func (_m *TapdClientInterface) GetUtxos(tapdHost string, macaroon string) (*tapd.GetUtxosResponse, error) {
	ret := _m.Called(tapdHost, macaroon)

	if len(ret) == 0 {
		panic("no return value specified for GetUtxos")
	}

	var r0 *tapd.GetUtxosResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*tapd.GetUtxosResponse, error)); ok {
		return rf(tapdHost, macaroon)
	}
	if rf, ok := ret.Get(0).(func(string, string) *tapd.GetUtxosResponse); ok {
		r0 = rf(tapdHost, macaroon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tapd.GetUtxosResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tapdHost, macaroon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TapdClientInterface_GetUtxos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUtxos'
type TapdClientInterface_GetUtxos_Call struct {
	*mock.Call
}

// GetUtxos is a helper method to define mock.On call
//   - tapdHost string
//   - macaroon string
func (_e *TapdClientInterface_Expecter) GetUtxos(tapdHost interface{}, macaroon interface{}) *TapdClientInterface_GetUtxos_Call {
	return &TapdClientInterface_GetUtxos_Call{Call: _e.mock.On("GetUtxos", tapdHost, macaroon)}
}

func (_c *TapdClientInterface_GetUtxos_Call) Run(run func(tapdHost string, macaroon string)) *TapdClientInterface_GetUtxos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TapdClientInterface_GetUtxos_Call) Return(_a0 *tapd.GetUtxosResponse, _a1 error) *TapdClientInterface_GetUtxos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TapdClientInterface_GetUtxos_Call) RunAndReturn(run func(string, string) (*tapd.GetUtxosResponse, error)) *TapdClientInterface_GetUtxos_Call {
	_c.Call.Return(run)
	return _c
}

// SendAssets provides a mock function with given fields: tapdHost, macaroon, invoice
func (_m *TapdClientInterface) SendAssets(tapdHost string, macaroon string, invoice string) (*tapd.FundVirtualPSBTResponse, error) {
	ret := _m.Called(tapdHost, macaroon, invoice)

	if len(ret) == 0 {
		panic("no return value specified for SendAssets")
	}

	var r0 *tapd.FundVirtualPSBTResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*tapd.FundVirtualPSBTResponse, error)); ok {
		return rf(tapdHost, macaroon, invoice)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *tapd.FundVirtualPSBTResponse); ok {
		r0 = rf(tapdHost, macaroon, invoice)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tapd.FundVirtualPSBTResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(tapdHost, macaroon, invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TapdClientInterface_SendAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAssets'
type TapdClientInterface_SendAssets_Call struct {
	*mock.Call
}

// SendAssets is a helper method to define mock.On call
//   - tapdHost string
//   - macaroon string
//   - invoice string
func (_e *TapdClientInterface_Expecter) SendAssets(tapdHost interface{}, macaroon interface{}, invoice interface{}) *TapdClientInterface_SendAssets_Call {
	return &TapdClientInterface_SendAssets_Call{Call: _e.mock.On("SendAssets", tapdHost, macaroon, invoice)}
}

func (_c *TapdClientInterface_SendAssets_Call) Run(run func(tapdHost string, macaroon string, invoice string)) *TapdClientInterface_SendAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TapdClientInterface_SendAssets_Call) Return(fundedPsbt *tapd.FundVirtualPSBTResponse, err error) *TapdClientInterface_SendAssets_Call {
	_c.Call.Return(fundedPsbt, err)
	return _c
}

func (_c *TapdClientInterface_SendAssets_Call) RunAndReturn(run func(string, string, string) (*tapd.FundVirtualPSBTResponse, error)) *TapdClientInterface_SendAssets_Call {
	_c.Call.Return(run)
	return _c
}

// SignVirtualPSBT provides a mock function with given fields: tapdHost, macaroon, psbt
func (_m *TapdClientInterface) SignVirtualPSBT(tapdHost string, macaroon string, psbt string) (*tapd.SignVirtualPSBTResponse, error) {
	ret := _m.Called(tapdHost, macaroon, psbt)

	if len(ret) == 0 {
		panic("no return value specified for SignVirtualPSBT")
	}

	var r0 *tapd.SignVirtualPSBTResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (*tapd.SignVirtualPSBTResponse, error)); ok {
		return rf(tapdHost, macaroon, psbt)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) *tapd.SignVirtualPSBTResponse); ok {
		r0 = rf(tapdHost, macaroon, psbt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tapd.SignVirtualPSBTResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(tapdHost, macaroon, psbt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TapdClientInterface_SignVirtualPSBT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignVirtualPSBT'
type TapdClientInterface_SignVirtualPSBT_Call struct {
	*mock.Call
}

// SignVirtualPSBT is a helper method to define mock.On call
//   - tapdHost string
//   - macaroon string
//   - psbt string
func (_e *TapdClientInterface_Expecter) SignVirtualPSBT(tapdHost interface{}, macaroon interface{}, psbt interface{}) *TapdClientInterface_SignVirtualPSBT_Call {
	return &TapdClientInterface_SignVirtualPSBT_Call{Call: _e.mock.On("SignVirtualPSBT", tapdHost, macaroon, psbt)}
}

func (_c *TapdClientInterface_SignVirtualPSBT_Call) Run(run func(tapdHost string, macaroon string, psbt string)) *TapdClientInterface_SignVirtualPSBT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TapdClientInterface_SignVirtualPSBT_Call) Return(fundedPsbt *tapd.SignVirtualPSBTResponse, err error) *TapdClientInterface_SignVirtualPSBT_Call {
	_c.Call.Return(fundedPsbt, err)
	return _c
}

func (_c *TapdClientInterface_SignVirtualPSBT_Call) RunAndReturn(run func(string, string, string) (*tapd.SignVirtualPSBTResponse, error)) *TapdClientInterface_SignVirtualPSBT_Call {
	_c.Call.Return(run)
	return _c
}

// NewTapdClientInterface creates a new instance of TapdClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTapdClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TapdClientInterface {
	mock := &TapdClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
